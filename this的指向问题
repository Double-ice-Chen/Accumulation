this对象是运行时基于函数的执行环境绑定的：在全局函数中，this等于window，而当函数被作为某个对象的方法调用时，this等于那个对象。《Javascript高级程序设计》

var name = "The Window";
var object = {
    name: "My object",
    getNameFunc: function() {
        return function() {
            return this.name;
        };
    }
}
alert(object.getNameFunc()()); // "The Window"


    为什么最后的结果是"The Window"而不是object里面的name"My object"呢？
    
    首先，要理解函数作为函数调用和函数作为方法调用。
    
    我们把最后的一句拆成两个步骤执行：
var first = object.getNameFunc();
var second = first();
    其中
    第一步，获得的first为返回的匿名函数，此时的getNameFunc()作为object的方法调用，如果在getNameFunc()中使用this，此时的this指向的是object对象。
     
    第二步，调用first函数，可以很清楚的发现，此时调用first函数，first函数没有在对象中调用，
    因此是作为函数调用的，是在全局作用域下，因此first函数中的this指向的是window。



1.以函数的形式调用时，this永远都是window。比如fun();相当于window.fun();

2.以方法的形式调用时，this是调用方法的那个对象

3.以构造函数的形式调用时，this是新创建的那个对象

4.使用call和apply调用时，this是指定的那个对象
    

    function fun() {
        console.log(this);
        console.log(this.name);
    }

    var obj1 = {
        name: "smyh",
        sayName: fun
    };

    var obj2 = {
        name: "vae",
        sayName: fun
    };

    var name = "全局的name属性";

    //以函数形式调用，this是window
    fun();       //可以理解成 window.fun()


打印出      Window
     全局的name属性


上面的举例可以看出，this指向的是window对象，所以 this.name 指的是全局的name。


        function fun() {
            console.log(this);
            console.log(this.name);
        }

        var obj1 = {
            name: "smyh",
            sayName: fun
        };

        var obj2 = {
            name: "vae",
            sayName: fun
        };

        var name = "全局的name属性";

        //以方法的形式调用，this是调用方法的对象
        obj2.sayName();

    打印出  Object
           vae


上面的举例可以看出，this指向的是 对象 obj2 ，所以 this.name 指的是 obj2.name。





   如何获得外部作用域中的this呢？
    可以把外部作用域中的this保存在闭包可以访问到的变量里。如下：
    var name = "The Window";
var object = {
    name: "My object",
    getNameFunc: function() {
        var that = this;   // 将getNameFunc()的this保存在that变量中
        var age = 15;
        return function() {
            return that.name;
        };
    }
}
alert(object.getNameFunc()());   // "My object"
